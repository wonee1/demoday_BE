// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(255)
  imageUrl      String?  @db.VarChar(255)
  isPublic      Boolean  @default(true)
  password      String?  @db.VarChar(255)
  createdAt     DateTime @default(now())
  badgeCount    Int      @default(0)
  postCount     Int      @default(0)
  likeCount     Int      @default(0)
  introduction  String?  @db.VarChar(255)  // 수정된 필드 이름

  // 관계 설정
  posts         Post[]
  badges        Badge[]
}


model Post {
  id           Int       @id @default(autoincrement())
  groupId      Int
  nickname     String    @db.VarChar(255)
  title        String    @db.VarChar(255)
  content      String
  imageUrl     String?   @db.VarChar(255)
  location     String?   @db.VarChar(255)
  moment       DateTime?
  isPublic     Boolean   @default(true)
  password     String?   @db.VarChar(255)
  createdAt    DateTime  @default(now())
  likeCount    Int       @default(0)
  commentCount Int       @default(0)
  tags         String?   @db.VarChar(255)

  // 외래키 설정 및 관계 설정
  group    Group     @relation(fields: [groupId], references: [id])
  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  nickname  String   @db.VarChar(255)
  content   String
  password  String?  @db.VarChar(255)
  createdAt DateTime @default(now())

  // 외래키 설정 및 관계 설정
  post Post @relation(fields: [postId], references: [id])
}

model Badge {
  id         Int      @id @default(autoincrement())
  groupId    Int
  badge_type String   @db.VarChar(255)
  createdAt  DateTime @default(now())

  // 외래키 설정 및 관계 설정
  group Group @relation(fields: [groupId], references: [id])
}
